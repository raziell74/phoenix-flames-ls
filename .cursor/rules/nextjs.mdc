---
description: Sets code quality rules for Next.js
globs: src/app/**/*.{ts,tsx,js,jsx}, src/components/**/*.{ts,tsx,js,jsx}
---
#### **Next.js (App Router)**

- **File Structure & Routing:**
  - Organize pages and components within the `app/` directory using nested routing.
  - Structure each route with dedicated files (e.g., `page.tsx`, `layout.tsx`, `error.tsx`, `loading.tsx`) and keep route-specific components together.
  - Separate shared components into a common folder to promote reuse.

- **Server vs. Client Components:**
  - Default to Server Components for static content and data fetching to improve performance and SEO.
  - Mark interactive or stateful components with `"use client"` to enable client-side behavior.
  - Use Server Components to reduce bundle sizes and enhance performance.

- **Data Fetching & Performance:**
  - Use SSR, SSG, and ISR patterns to optimize data freshness and load times.
  - Co-locate data fetching logic with consuming components for clarity.
  - Apply caching and revalidation techniques to reduce unnecessary requests.

- **SEO & Metadata:**
  - Export a `metadata` object from pages/layouts to provide SEO details (e.g., title, description, Open Graph).
  - Include structured data where applicable to improve search engine understanding.

- **Static Assets & Optimizations:**
  - Use Next.jsâ€™s Image component for responsive, optimized images.
  - Benefit from automatic code splitting and prefetching to load only necessary JavaScript.

- **Error Handling & Edge Cases:**
  - Implement error boundaries with Next.js error components to gracefully handle runtime errors.
  - Provide custom 404 (`not-found.tsx`) and loading states to enhance user experience.

- **Best Practices:**
  - Follow consistent naming conventions and modular folder structures.
  - Keep components small, focused, and reusable.
  - Regularly refactor and document code to leverage new Next.js features.
